/**************************************************************************

Copyright:  WH team

Author: YinJichao <jichaoyinyjc@163.com>、ChenBinXiang <chen_mech99@163.com>

Completion date:  XXX

Description: XXX

**************************************************************************/

#pragma once



#include "include/CTRIA3.h"
namespace CAE
{
	REGISTER(ele_base, CTRIA3, "CTRIA3");

	// 建立本构矩阵
	void CTRIA3::build_cons_mat(double D[8][8])
	{
		double e = matrial_struc_.young_modulus;
		double nu = matrial_struc_.poisson_ratio;
		double temp = e / (1. - nu * nu);

		double G1[3][3] = { 0. };
		G1[0][0] = temp;
		G1[0][1] = nu * temp;
		G1[1][0] = nu * temp;
		G1[1][1] = temp;
		G1[2][2] = (1. - nu) / 2. * temp;

		double G3[2][2] = { 0. };
		G3[0][0] = 0.5 * e / (1 + nu);
		G3[1][1] = 0.5 * e / (1 + nu);

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				D[i][j] = G1[i][j] * t;
				D[i + 3][j + 3] = G1[i][j] * t * t * t / 12.;
				if (i == 2 || j == 2) {
					continue;
				}
				D[i + 6][j + 6] = G3[i][j] * t * 5. / 6.;
			}
		}
	}

	//建立单元局部坐标系
	void CTRIA3::computeLocalSystems(Eigen::Ref<Eigen::MatrixXd> node_coords)
	{
		Point n1 = Point(node_coords(0, 0), node_coords(0, 1), node_coords(0, 2));//节点1
		Point n2 = Point(node_coords(1, 0), node_coords(1, 1), node_coords(1, 2));//节点2
		Point n3 = Point(node_coords(2, 0), node_coords(2, 1), node_coords(2, 2));//节点3

		//x轴
		Point x_vec = n2 - n1;
		x_vec.unit();
		
		//z轴
		Point z_vec = x_vec ^ (n3 - n1);
		z_vec.unit();
		
		//y轴
		Point y_vec = z_vec ^ x_vec;
		
		//计算局部坐标系
		TEG[0][0] = x_vec.x;
		TEG[0][1] = x_vec.y;
		TEG[0][2] = x_vec.z;
		TEG[1][0] = y_vec.x;
		TEG[1][1] = y_vec.y;
		TEG[1][2] = y_vec.z;
		TEG[2][0] = z_vec.x;
		TEG[2][1] = z_vec.y;
		TEG[2][2] = z_vec.z;

		//计算节点局部坐标
		lcoords.push_back(TEG * (n1 - n1));
		lcoords.push_back(TEG * (n2 - n1));
		lcoords.push_back(TEG * (n3 - n1));

		area = lcoords[1].x * lcoords[2].y / 2.0;
	}

	// 建立单元刚度矩阵
	void CTRIA3::build_ele_stiff_mat(Eigen::Ref<Eigen::MatrixXd> node_coords, Eigen::Ref<Eigen::MatrixXd> stiffness_matrix)
	{
		double matD[8][8] = { 0. };
		build_cons_mat(matD);

		computeLocalSystems(node_coords);

		double ke[18][18] = { 0. };
		Ke(node_coords, matD, ke);

		TEG.trans(ke);
	}

	void CTRIA3::Ke(Eigen::Ref<Eigen::MatrixXd> node_coords, double D[8][8], double ke[18][18])
	{
		//膜部分的刚度矩阵
		double c1 = 1. / lcoords[1].x;
		double c2 = 1. / lcoords[2].y;
		double c3 = (lcoords[2].x - lcoords[1].x)* c1* c2;
		double c4 = lcoords[2].x * c1 * c2;

		double BM[3][18] = { 0. };

		BM[0][0] = -c1;
		BM[0][6] = c1;
		BM[1][1] = c3;
		BM[1][7] = -c4;
		BM[1][13] = c2;
		BM[2][0] = c3;
		BM[2][1] = -c1;
		BM[2][6] = -c4; 
		BM[2][7] = c1;
		BM[2][12] = c2;

		this->BE1[0][0] = BM[0][0];
		this->BE1[0][2] = BM[0][6];

		this->BE1[1][1] = BM[1][1];
		this->BE1[1][3] = BM[1][7];
		this->BE1[1][4] = BM[1][13];

		this->BE1[2][0] = BM[2][0];
		this->BE1[2][1] = BM[2][1];
		this->BE1[2][2] = BM[2][6];
		this->BE1[2][3] = BM[2][7];
		this->BE1[2][4] = BM[2][12];


		//计算膜部分Ke = BmT * D * Bm			(Bm中大部分是零元素，计算进行了省略)
		double DB[3][18] = { 0. };
		DB[0][0] = D[0][0] * BM[0][0] + D[0][2] * BM[2][0];
		DB[1][0] = D[1][0] * BM[0][0] + D[1][2] * BM[2][0];
		DB[2][0] = D[2][0] * BM[0][0] + D[2][2] * BM[2][0];

		DB[0][1] = D[0][1] * BM[1][1] + D[0][2] * BM[2][1];
		DB[1][1] = D[1][1] * BM[1][1] + D[1][2] * BM[2][1];
		DB[2][1] = D[2][1] * BM[1][1] + D[2][2] * BM[2][1];

		DB[0][6] = D[0][0] * BM[0][6] + D[0][2] * BM[2][6];
		DB[1][6] = D[1][0] * BM[0][6] + D[1][2] * BM[2][6];
		
		DB[0][7] = D[0][1] * BM[1][7] + D[0][2] * BM[2][7];
		DB[1][7] = D[1][1] * BM[1][7] + D[1][2] * BM[2][7];
		DB[2][7] = D[2][1] * BM[1][7] + D[2][2] * BM[2][7];
					
		DB[0][12] = D[0][2] * BM[2][12];
		DB[1][12] = D[1][2] * BM[2][12];
		DB[2][12] = D[2][2] * BM[2][12];
							
		DB[0][13] = D[0][1] * BM[1][13];
		DB[1][13] = D[1][1] * BM[1][13];
		DB[2][13] = D[2][1] * BM[1][13];

		ke[0][0] = (BM[0][0] * DB[0][0] + BM[2][0] * DB[2][0]) * area;
		ke[0][1] = (BM[0][0] * DB[0][1] + BM[2][0] * DB[2][1]) * area;
		ke[0][6] = (BM[0][0] * DB[0][6] + BM[2][0] * DB[2][6]) * area;
		ke[0][7] = (BM[0][0] * DB[0][7] + BM[2][0] * DB[2][7]) * area;
		ke[0][12] = (BM[0][0] * DB[0][12] + BM[2][0] * DB[2][12]) * area;
		ke[0][13] = (BM[0][0] * DB[0][13] + BM[2][0] * DB[2][13]) * area;

		ke[1][0] = (BM[1][1] * DB[1][0] + BM[2][1] * DB[2][0]) * area;
		ke[1][1] = (BM[1][1] * DB[1][1] + BM[2][1] * DB[2][1]) * area;
		ke[1][6] = (BM[1][1] * DB[1][6] + BM[2][1] * DB[2][6]) * area;
		ke[1][7] = (BM[1][1] * DB[1][7] + BM[2][1] * DB[2][7]) * area;
		ke[1][12] = (BM[1][1] * DB[1][12] + BM[2][1] * DB[2][12]) * area;
		ke[1][13] = (BM[1][1] * DB[1][13] + BM[2][1] * DB[2][13]) * area;

		ke[6][0] = (BM[0][6] * DB[0][0] + BM[2][6] * DB[2][0]) * area;
		ke[6][1] = (BM[0][6] * DB[0][1] + BM[2][6] * DB[2][1]) * area;
		ke[6][6] = (BM[0][6] * DB[0][6] + BM[2][6] * DB[2][6]) * area;
		ke[6][7] = (BM[0][6] * DB[0][7] + BM[2][6] * DB[2][7]) * area;
		ke[6][12] = (BM[0][6] * DB[0][12] + BM[2][6] * DB[2][12]) * area;
		ke[6][13] = (BM[0][6] * DB[0][13] + BM[2][6] * DB[2][13]) * area;

		ke[7][0] = (BM[1][7] * DB[1][0] + BM[2][7] * DB[2][0]) * area;
		ke[7][1] = (BM[1][7] * DB[1][1] + BM[2][7] * DB[2][1]) * area;
		ke[7][6] = (BM[1][7] * DB[1][6] + BM[2][7] * DB[2][6]) * area;
		ke[7][7] = (BM[1][7] * DB[1][7] + BM[2][7] * DB[2][7]) * area;
		ke[7][12] = (BM[1][7] * DB[1][12] + BM[2][7] * DB[2][12]) * area;
		ke[7][13] = (BM[1][7] * DB[1][13] + BM[2][7] * DB[2][13]) * area;

		ke[12][0] = (BM[2][12] * DB[2][0]) * area;
		ke[12][1] = (BM[2][12] * DB[2][1]) * area;
		ke[12][6] = (BM[2][12] * DB[2][6]) * area;
		ke[12][7] = (BM[2][12] * DB[2][7]) * area;
		ke[12][12] = (BM[2][12] * DB[2][12]) * area;
		ke[12][13] = (BM[2][12] * DB[2][13]) * area;

		ke[13][0] = (BM[1][13] * DB[1][0]) * area;
		ke[13][1] = (BM[1][13] * DB[1][1]) * area;
		ke[13][6] = (BM[1][13] * DB[1][6]) * area;
		ke[13][7] = (BM[1][13] * DB[1][7]) * area;
		ke[13][12] = (BM[1][13] * DB[1][12]) * area;
		ke[13][13] = (BM[1][13] * DB[1][13]) * area;

		//板部分的刚度矩阵计算
		int ID[9] = { 2,8,14,3,9,15,4,10,16 };
		double A[3], B[3] = { 0. };
		A[0] = lcoords[2].x - lcoords[1].x;		A[1] = -lcoords[2].x;		A[2] = lcoords[1].x;
		B[0] = -lcoords[2].y;					B[1] = lcoords[2].y;		B[2] = 0.0;

		BE2[0][0] = 0.0;
		BE2[0][1] = 0.0;
		BE2[0][2] = 0.0;
		BE2[0][3] = B[0] / (2. * area);
		BE2[0][4] = B[1] / (2. * area);
		BE2[0][5] = B[2] / (2. * area);

		BE2[1][0] = -A[0] / (2. * area);
		BE2[1][1] = -A[1] / (2. * area);
		BE2[1][2] = -A[2] / (2. * area);
		BE2[1][3] = 0.0;
		BE2[1][4] = 0.0;
		BE2[1][5] = 0.0;

		BE2[2][0] = -B[0] / (2. * area);
		BE2[2][1] = -B[1] / (2. * area);
		BE2[2][2] = -B[2] / (2. * area);
		BE2[2][3] = A[0] / (2. * area);
		BE2[2][4] = A[1] / (2. * area);
		BE2[2][5] = A[2] / (2. * area);

		double A4 = 4.0 * area;
		double A42 = A4 * area;

		double BS[2][9] = { 0. };
		double XI[3] = { 1.0 / 3.0,  1.0 / 3.0 , 1.0 / 3.0 };

		BE3[0][0] = B[0] / (2.0 * area);
		BE3[0][3] = B[1] / (2.0 * area);
		BE3[0][6] = B[2] / (2.0 * area);
		BE3[0][1] = -1.0 * (B[0] * (XI[2] * B[2] - XI[2] * B[1]) / A4);
		BE3[0][4] = -1.0 * (B[0] * (-1.0 * XI[0] * B[2] + XI[2] * B[0]) / A4);
		BE3[0][7] = -1.0 * (B[0] * (XI[0] * B[1] - XI[1] * B[0]) / A4);
		BE3[0][2] = (XI[0] * (A4 - B[1] * A[2] + B[2] * A[1] + B[0] * (-1.0 * XI[1] * A[2] + XI[2] * A[1]))) / A4;
		BE3[0][5] = (XI[1] * (A4 + B[0] * A[2] - B[2] * A[0] + B[1] * (XI[0] * A[2] - XI[2] * A[0]))) / A4;
		BE3[0][8] = (XI[2] * (A4 + B[1] * A[1] - B[0] * A[1] + B[2] * (-1.0 * XI[0] * A[1] + XI[1] * A[0]))) / A4;
		 
		BE3[1][0] = A[0] / (2.0 * area);
		BE3[1][3] = A[1] / (2.0 * area);
		BE3[1][6] = A[2] / (2.0 * area);
		BE3[1][1] = -1.0 * (XI[0] * (A4 + A[1] * B[2] - A[2] * B[1] + A[0] * (XI[1] * B[2] - XI[2] * B[1]))) / A4;
		BE3[1][4] = -1.0 * (XI[1] * (A4 - A[0] * B[2] + A[2] * B[0] + A[1] * (-1.0 * XI[0] * B[2] + XI[2] * B[0]))) / A4;
		BE3[1][7] = -1.0 * (XI[2] * (A4 - A[1] * B[1] + A[0] * B[1] + A[2] * (XI[0] * B[1] - XI[1] * B[0]))) / A4;
		BE3[1][2] = A[0] * (-1.0 * XI[1] * A[2] + XI[2] * A[1]) / A4;
		BE3[1][5] = A[1] * (XI[0] * A[2] + XI[2] * A[0]) / A4;
		BE3[1][8] = A[2] * (-1.0 * XI[0] * A[1] + XI[1] * A[0]) / A4;
		

		double FXX[3][3] = { 0. }, FYY[3][3] = { 0. }, FXY[3][3] = { 0. };
		FXX[0][0] = B[0] * B[0] / A42;
		FXX[0][1] = B[0] * B[1] / A42;
		FXX[1][0] = B[1] * B[0] / A42;
		FXX[1][1] = B[1] * B[1] / A42;

		FYY[0][0] = A[0] * A[0] / A42;
		FYY[0][1] = A[0] * A[1] / A42;
		FYY[0][2] = A[0] * A[2] / A42;
		FYY[1][0] = A[1] * A[0] / A42;
		FYY[1][1] = A[1] * A[1] / A42;
		FYY[1][2] = A[1] * A[2] / A42;
		FYY[2][0] = A[2] * A[0] / A42;
		FYY[2][1] = A[2] * A[1] / A42;
		FYY[2][2] = A[2] * A[2] / A42;

		FXY[0][0] = B[0] * A[0] / A42;
		FXY[0][1] = B[0] * A[1] / A42;
		FXY[0][2] = B[0] * A[2] / A42;
		FXY[1][0] = B[1] * A[0] / A42;
		FXY[1][1] = B[1] * A[1] / A42;
		FXY[1][2] = B[1] * A[2] / A42;

		double KB[9][9] = { 0. }, KS[9][9] = { 0. };
		KB[3][3] = area * (D[4][4] * FYY[0][0] + D[4][5] * (FXY[0][0] + FXY[0][0]) + D[5][5] * FXX[0][0]);
		KB[3][4] = area * (D[4][4] * FYY[0][1] + D[4][5] * (FXY[0][1] + FXY[1][0]) + D[5][5] * FXX[0][1]);
		KB[3][5] = area * (D[4][4] * FYY[0][2] + D[4][5] * (FXY[0][2]/*+FXY[2][0]*/)/*+D[5][5] * FXX[0][2]*/);				//注释部分因为FXX，FXY固定为0
		KB[4][3] = KB[3][4];
		KB[4][4] = area * (D[4][4] * FYY[1][1] + D[4][5] * (FXY[1][1] + FXY[1][1]) + D[5][5] * FXX[1][1]);
		KB[4][5] = area * (D[4][4] * FYY[1][2] + D[4][5] * (FXY[1][2]/*+FXY[2][1]*/)/*+D[5][5] * FXX[1][2]*/);				//注释部分因为FXX，FXY固定为0
		KB[5][3] = KB[3][5];
		KB[5][4] = KB[4][5];
		KB[5][5] = area * (D[4][4] * FYY[2][2] + D[4][5] * (FXY[2][2]/*+FXY[2][2]*/)/*+D[5][5] * FXX[2][2]*/);				//注释部分因为FXX，FXY固定为0


		KB[3][6] = -area * (D[3][4] * FXY[0][0] + D[4][5] * FYY[0][0] + D[3][5] * FXX[0][0] + D[5][5] * FXY[0][0]);
		KB[3][7] = -area * (D[3][4] * FXY[1][0] + D[4][5] * FYY[0][1] + D[3][5] * FXX[0][1] + D[5][5] * FXY[0][1]);
		KB[3][8] = -area * (/*D[3][4]*FXY[2][0]*/+D[4][5] * FYY[0][2] +/*D[3][5]*FXX[0][2]+*/ D[5][5] * FXY[0][2]);			//注释部分因为FXX，FXY固定为0
		KB[4][6] = -area * (D[3][4] * FXY[0][1] + D[4][5] * FYY[1][0] + D[3][5] * FXX[1][0] + D[5][5] * FXY[1][0]);
		KB[4][7] = -area * (D[3][4] * FXY[1][1] + D[4][5] * FYY[1][1] + D[3][5] * FXX[1][1] + D[5][5] * FXY[1][1]);
		KB[4][8] = -area * (/*D[3][4]*FXY[2][1]*/+D[4][5] * FYY[1][2] /*+D[3][5]*FXX[1][2]*/ + D[5][5] * FXY[1][2]);		//注释部分因为FXX，FXY固定为0
		KB[5][6] = -area * (D[3][4] * FXY[0][2] + D[4][5] * FYY[2][0] /*+D[3][5]*FXX[2][0]  + D[5][5] * FXY[2][0]*/);		//注释部分因为FXX，FXY固定为0
		KB[5][7] = -area * (D[3][4] * FXY[1][2] + D[4][5] * FYY[2][1] /*+D[3][5]*FXX[2][1]  + D[5][5] * FXY[2][1]*/);		//注释部分因为FXX，FXY固定为0
		KB[5][8] = -area * (/*D[3][4]*FXY[2][2]*/+D[4][5] * FYY[2][2] /*+D[3][5]*FXX[2][2]  + D[5][5] * FXY[2][2]*/);		//注释部分因为FXX，FXY固定为0
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				KB[j + 6][i + 3] = KB[i + 3][j + 6];
			}
		}

		KB[6][6] = area * (D[3][3] * FXX[0][0] + D[3][5] * (FXY[0][0] + FXY[0][0]) + D[5][5] * FYY[0][0]);
		KB[6][7] = area * (D[3][3] * FXX[0][1] + D[3][5] * (FXY[0][1] + FXY[1][0]) + D[5][5] * FYY[0][1]);
		KB[6][8] = area * (/*D[3][3]*FXX[0][2]+*/D[3][5] * (FXY[0][2] + FXY[2][0]) + D[5][5] * FYY[0][2]);//注释部分因为FXX为0
		KB[7][6] = KB[6][7];
		KB[7][7] = area * (D[3][3] * FXX[1][1] + D[3][5] * (FXY[1][1] + FXY[1][1]) + D[5][5] * FYY[1][1]);
		KB[7][8] = area * (/*D[3][3]* XX[1][2]+*/D[3][5] * (FXY[1][2] + FXY[2][1]) + D[5][5] * FYY[1][2]);//注释部分因为FXX为0
		KB[8][6] = KB[6][8];
		KB[8][7] = KB[7][8];
		KB[8][8] = area * (/*D[3][3]*FXX[2][2]+*/D[3][5] * (FXY[2][2] + FXY[2][2]) + D[5][5] * FYY[2][2]);//注释部分因为FXX为0

		double A1[3][3] = { 0. }, B2[3][3] = { 0. }, S1[3][3] = { 0. }, S2[3][3] = { 0. };
		A1[0][1] = A[1] * A[2] / A4;
		A1[0][2] = -A1[0][1];
		A1[1][0] = -A[0] * A[2] / A4;
		A1[1][2] = -A1[1][0];
		A1[2][0] = A[0] * A[1] / A4;
		A1[2][1] = -A1[2][0];

		B2[2][0] = -B[0] * B[1] / A4;
		B2[2][1] = -B2[2][0];

		S1[0][0] = (A[1] * B[2] - A[2] * B[1]) / A4 + 1.0;
		S1[0][2] = A[2] * B[1] / A4;
		S1[1][1] = (A[2] * B[0] - A[0] * B[2]) / A4 + 1.0;
		S1[1][2] = -A[2] * B[0] / A4;
		S1[2][0] = -A[0] * B[1] / A4;
		S1[2][1] = A[1] * B[0] / A4;
		S1[2][2] = (A[0] * B[1] - A[1] * B[0]) / A4 + 1.0;

		S2[0][0] = (A[1] * B[2] - A[2] * B[1]) / A4 + 1.0;
		S2[0][1] = B[1] * A[2] / A4;
		S2[1][0] = -B[0] * A[2] / A4;
		S2[1][1] = (A[2] * B[0] - A[0] * B[2]) / A4 + 1.0;
		S2[2][0] = B[0] * A[1] / A4;
		S2[2][1] = -B[1] * A[0] / A4;
		S2[2][2] = (A[0] * B[1] - A[1] * B[0]) / A4 + 1.0;

		double I00[3][3] = { 0. }, IX0[3][3] = { 0. }, IY0[3][3] = { 0. };
		I00[0][0] = area / 6.0;
		I00[0][1] = area / 12.0;
		I00[0][2] = I00[0][1];
		I00[1][0] = I00[0][1];
		I00[1][1] = I00[0][0];
		I00[1][2] = I00[0][1];
		I00[2][0] = I00[0][1];
		I00[2][1] = I00[0][1];
		I00[2][2] = I00[0][0];

		IX0[0][0] = B[0] / 6.0;
		IX0[0][1] = IX0[0][0];
		IX0[0][2] = IX0[0][0];
		IX0[1][0] = B[1] / 6.0;
		IX0[1][1] = IX0[1][0];
		IX0[1][2] = IX0[1][0];

		IY0[0][0] = A[0] / 6.0;
		IY0[0][1] = IY0[0][0];
		IY0[0][2] = IY0[0][0];
		IY0[1][0] = A[1] / 6.0;
		IY0[1][1] = IY0[1][0];
		IY0[1][2] = IY0[1][0];
		IY0[2][0] = A[2] / 6.0;
		IY0[2][1] = IY0[2][0];
		IY0[2][2] = IY0[2][0];

		double T1[3][3] = { 0. }, T2[3][3] = { 0. }, T3[3][3] = { 0. }, T4[3][3] = { 0. };
		T1[0][0] =/*D[6][6]*B2[0][0]+*/ D[6][7] * S1[0][0];
		T1[0][1] =/*D[6][6]*B2[0][1]  + D[6][7] * S1[0][1]*/0.0;
		T1[0][2] =/*D[6][6]*B2[0][2]+*/ D[6][7] * S1[0][2];
		T1[1][0] =/*D[6][6]*B2[1][0]  + D[6][7] * S1[1][0]*/0.0;
		T1[1][1] =/*D[6][6]*B2[1][1]+*/ D[6][7] * S1[1][1];
		T1[1][2] =/*D[6][6]*B2[1][2]+*/ D[6][7] * S1[1][2];
		T1[2][0] = D[6][6] * B2[2][0] + D[6][7] * S1[2][0];
		T1[2][1] = D[6][6] * B2[2][1] + D[6][7] * S1[2][1];
		T1[2][2] =/*D[6][6]*B2[2][2]+*/ D[6][7] * S1[2][2];

		T2[0][0] = /*D[6][7]*B2[0][0]+*/D[7][7] * S1[0][0];
		T2[0][1] = /*D[6][7]*B2[0][1] + D[7][7] * S1[0][1]*/0.0;
		T2[0][2] = /*D[6][7]*B2[0][2]+*/D[7][7] * S1[0][2];
		T2[1][0] = /*D[6][7]*B2[1][0] + D[7][7] * S1[1][0]*/0.0;
		T2[1][1] = /*D[6][7]*B2[1][1]+*/D[7][7] * S1[1][1];
		T2[1][2] = /*D[6][7]*B2[1][2]+*/D[7][7] * S1[1][2];
		T2[2][0] = D[6][7] * B2[2][0] + D[7][7] * S1[2][0];
		T2[2][1] = D[6][7] * B2[2][1] + D[7][7] * S1[2][1];
		T2[2][2] = D[6][7] * B2[2][2] + D[7][7] * S1[2][2];

		T3[0][0] = D[6][6] * S2[0][0]/*+D[6][7] * A1[0][0]*/;
		T3[0][1] = D[6][6] * S2[0][1] + D[6][7] * A1[0][1];
		T3[0][2] =/*D[6][6]*S2[0][2]+*/ D[6][7] * A1[0][2];
		T3[1][0] = D[6][6] * S2[1][0] + D[6][7] * A1[1][0];
		T3[1][1] = D[6][6] * S2[1][1]/*+D[6][7] * A1[1][1]*/;
		T3[1][2] =/*D[6][6]*S2[1][2]+*/ D[6][7] * A1[1][2];
		T3[2][0] = D[6][6] * S2[2][0] + D[6][7] * A1[2][0];
		T3[2][1] = D[6][6] * S2[2][1] + D[6][7] * A1[2][1];
		T3[2][2] = D[6][6] * S2[2][2]/*+D[6][7] * A1[2][2]*/;

		T4[0][0] = D[6][7] * S2[0][0] /*+D[7][7] * A1[0][0]*/;
		T4[0][1] = D[6][7] * S2[0][1] + D[7][7] * A1[0][1];
		T4[0][2] =/*D[6][7] * S2[0][2]+*/D[7][7] * A1[0][2];
		T4[1][0] = D[6][7] * S2[1][0] + D[7][7] * A1[1][0];
		T4[1][1] = D[6][7] * S2[1][1] /*+D[7][7] * A1[1][1]*/;
		T4[1][2] =/*D[6][7] * S2[1][2]+*/D[7][7] * A1[1][2];
		T4[2][0] = D[6][7] * S2[2][0] + D[7][7] * A1[2][0];
		T4[2][1] = D[6][7] * S2[2][1] + D[7][7] * A1[2][1];
		T4[2][2] = D[6][7] * S2[2][2] /*+D[7][7] * A1[2][2]*/;

		KS[0][0] = area * (D[6][6] * FXX[0][0] + D[6][7] * (FXY[0][0] + FXY[0][0]) + D[7][7] * FYY[0][0]);
		KS[0][1] = area * (D[6][6] * FXX[0][1] + D[6][7] * (FXY[0][1] + FXY[1][0]) + D[7][7] * FYY[0][1]);
		KS[0][2] = area * (/*D[6][6] * FXX[0][2]+*/ D[6][7] * (FXY[0][2] /*+ FXY[2][0]*/) + D[7][7] * FYY[0][2]);
		KS[1][0] = area * (D[6][6] * FXX[1][0] + D[6][7] * (FXY[1][0] + FXY[0][1]) + D[7][7] * FYY[1][0]);
		KS[1][1] = area * (D[6][6] * FXX[1][1] + D[6][7] * (FXY[1][1] + FXY[1][1]) + D[7][7] * FYY[1][1]);
		KS[1][2] = area * (/*D[6][6] * FXX[1][2]+*/ D[6][7] * (FXY[1][2] /*+ FXY[2][1]*/) + D[7][7] * FYY[1][2]);
		KS[2][0] = area * (/*D[6][6] * FXX[2][0]+*/ D[6][7] * (/*FXY[2][0]+*/FXY[0][2]) + D[7][7] * FYY[2][0]);
		KS[2][1] = area * (/*D[6][6] * FXX[2][1]+*/ D[6][7] * (/*FXY[2][1]+*/FXY[1][2]) + D[7][7] * FYY[2][1]);
		KS[2][2] = area * (/*D[6][6] * FXX[2][2]+*/ D[6][7] * (/*FXY[2][2]+*/FXY[2][2]) + D[7][7] * FYY[2][2]);

		double DUM1[3][3] = { 0. }, DUM2[3][3] = { 0. };
		//! DUM1 = IX0 * T1;
		DUM1[0][0] = IX0[0][0] * T1[0][0] + /*IX0[0][1] * T1[1][0] +*/ IX0[0][2] * T1[2][0];
		DUM1[0][1] = /*IX0[0][0] * T1[0][1] +*/ IX0[0][1] * T1[1][1] + IX0[0][2] * T1[2][1];
		DUM1[0][2] = IX0[0][0] * T1[0][2] + IX0[0][1] * T1[1][2] + IX0[0][2] * T1[2][2];
		DUM1[1][0] = IX0[1][0] * T1[0][0] + /*IX0[1][1] * T1[1][0] +*/ IX0[1][2] * T1[2][0];
		DUM1[1][1] = /*IX0[1][0] * T1[0][1] +*/ IX0[1][1] * T1[1][1] + IX0[1][2] * T1[2][1];
		DUM1[1][2] = IX0[1][0] * T1[0][2] + IX0[1][1] * T1[1][2] + IX0[1][2] * T1[2][2];
		DUM1[2][0] = /*IX0[2][0] * T1[0][0] + IX0[2][1] * T1[1][0] + IX0[2][2] * T1[2][0]*/ 0.0;
		DUM1[2][1] = /*IX0[2][0] * T1[0][1] + IX0[2][1] * T1[1][1] + IX0[2][2] * T1[2][1]*/ 0.0;
		DUM1[2][2] = /*IX0[2][0] * T1[0][2] + IX0[2][1] * T1[1][2] + IX0[2][2] * T1[2][2]*/ 0.0;
		//! DUM2 = IY0 * T2;
		DUM2[0][0] = IY0[0][0] * T2[0][0] +/*IY0[0][1]*T2[1][0]+*/  IY0[0][2] * T2[2][0];
		DUM2[0][1] = /*IY0[0][0]*T2[0][1]+*/IY0[0][1] * T2[1][1] + IY0[0][2] * T2[2][1];
		DUM2[0][2] = IY0[0][0] * T2[0][2] + IY0[0][1] * T2[1][2] + IY0[0][2] * T2[2][2];
		DUM2[1][0] = IY0[1][0] * T2[0][0] +/*IY0[1][1]*T2[1][0]+*/  IY0[1][2] * T2[2][0];
		DUM2[1][1] = /*IY0[1][0]*T2[0][1]+*/IY0[1][1] * T2[1][1] + IY0[1][2] * T2[2][1];
		DUM2[1][2] = IY0[1][0] * T2[0][2] + IY0[1][1] * T2[1][2] + IY0[1][2] * T2[2][2];
		DUM2[2][0] = IY0[2][0] * T2[0][0] +/*IY0[2][1]*T2[1][0]+*/  IY0[2][2] * T2[2][0];
		DUM2[2][1] = /*IY0[2][0]*T2[0][1]+*/IY0[2][1] * T2[1][1] + IY0[2][2] * T2[2][1];
		DUM2[2][2] = IY0[2][0] * T2[0][2] + IY0[2][1] * T2[1][2] + IY0[2][2] * T2[2][2];
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				KS[i][j + 3] = -DUM1[i][j] - DUM2[i][j];
				KS[j + 3][i] = KS[i][j + 3];
			}
		}

		//! DUM1 = IX0 * T3;
		DUM1[0][0] = IX0[0][0] * T3[0][0] + IX0[0][1] * T3[1][0] + IX0[0][2] * T3[2][0];
		DUM1[0][1] = IX0[0][0] * T3[0][1] + IX0[0][1] * T3[1][1] + IX0[0][2] * T3[2][1];
		DUM1[0][2] = IX0[0][0] * T3[0][2] + IX0[0][1] * T3[1][2] + IX0[0][2] * T3[2][2];
		DUM1[1][0] = IX0[1][0] * T3[0][0] + IX0[1][1] * T3[1][0] + IX0[1][2] * T3[2][0];
		DUM1[1][1] = IX0[1][0] * T3[0][1] + IX0[1][1] * T3[1][1] + IX0[1][2] * T3[2][1];
		DUM1[1][2] = IX0[1][0] * T3[0][2] + IX0[1][1] * T3[1][2] + IX0[1][2] * T3[2][2];
		DUM1[2][0] = /*IX0[2][0] * T3[0][0] + IX0[2][1] * T3[1][0] + IX0[2][2] * T3[2][0]*/0.0;
		DUM1[2][1] = /*IX0[2][0] * T3[0][1] + IX0[2][1] * T3[1][1] + IX0[2][2] * T3[2][1]*/0.0;
		DUM1[2][2] = /*IX0[2][0] * T3[0][2] + IX0[2][1] * T3[1][2] + IX0[2][2] * T3[2][2]*/0.0;

		//! DUM2 = IY0 * T4;
		DUM2[0][0] = IY0[0][0] * T4[0][0] + IY0[0][1] * T4[1][0] + IY0[0][2] * T4[2][0];
		DUM2[0][1] = IY0[0][0] * T4[0][1] + IY0[0][1] * T4[1][1] + IY0[0][2] * T4[2][1];
		DUM2[0][2] = IY0[0][0] * T4[0][2] + IY0[0][1] * T4[1][2] + IY0[0][2] * T4[2][2];
		DUM2[1][0] = IY0[1][0] * T4[0][0] + IY0[1][1] * T4[1][0] + IY0[1][2] * T4[2][0];
		DUM2[1][1] = IY0[1][0] * T4[0][1] + IY0[1][1] * T4[1][1] + IY0[1][2] * T4[2][1];
		DUM2[1][2] = IY0[1][0] * T4[0][2] + IY0[1][1] * T4[1][2] + IY0[1][2] * T4[2][2];
		DUM2[2][0] = IY0[2][0] * T4[0][0] + IY0[2][1] * T4[1][0] + IY0[2][2] * T4[2][0];
		DUM2[2][1] = IY0[2][0] * T4[0][1] + IY0[2][1] * T4[1][1] + IY0[2][2] * T4[2][1];
		DUM2[2][2] = IY0[2][0] * T4[0][2] + IY0[2][1] * T4[1][2] + IY0[2][2] * T4[2][2];
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				KS[i][j + 6] = DUM1[i][j] + DUM2[i][j];
				KS[j + 6][i] = KS[i][j + 6];
			}
		}

		double I00T1[3][3] = { 0. }, I00T2[3][3] = { 0. }, I00T3[3][3] = { 0. }, I00T4[3][3] = { 0. };
		//I00T1 = I00 * T1;
		I00T1[0][0] = I00[0][0] * T1[0][0] +   /*I00[0][1] * T1[1][0] +*/ I00[0][2] * T1[2][0];
		I00T1[0][1] = /*I00[0][0] * T1[0][1]+*/  I00[0][1] * T1[1][1] + I00[0][2] * T1[2][1];
		I00T1[0][2] = I00[0][0] * T1[0][2] + I00[0][1] * T1[1][2] + I00[0][2] * T1[2][2];
		I00T1[1][0] = I00[1][0] * T1[0][0] +   /*I00[1][1] * T1[1][0] +*/ I00[1][2] * T1[2][0];
		I00T1[1][1] = /*I00[1][0] * T1[0][1] +*/ I00[1][1] * T1[1][1] + I00[1][2] * T1[2][1];
		I00T1[1][2] = I00[1][0] * T1[0][2] + I00[1][1] * T1[1][2] + I00[1][2] * T1[2][2];
		I00T1[2][0] = I00[2][0] * T1[0][0] +   /*I00[2][1] * T1[1][0] +*/ I00[2][2] * T1[2][0];
		I00T1[2][1] = /*I00[2][0] * T1[0][1] +*/ I00[2][1] * T1[1][1] + I00[2][2] * T1[2][1];
		I00T1[2][2] = I00[2][0] * T1[0][2] + I00[2][1] * T1[1][2] + I00[2][2] * T1[2][2];
		//I00T2 = I00 * T2;
		I00T2[0][0] = I00[0][0] * T2[0][0] +  /*I00[0][1] * T2[1][0] +*/ I00[0][2] * T2[2][0];
		I00T2[0][1] = /*I00[0][0] * T2[0][1]+*/ I00[0][1] * T2[1][1] + I00[0][2] * T2[2][1];
		I00T2[0][2] = I00[0][0] * T2[0][2] + I00[0][1] * T2[1][2] + I00[0][2] * T2[2][2];
		I00T2[1][0] = I00[1][0] * T2[0][0] +  /*I00[1][1] * T2[1][0] +*/ I00[1][2] * T2[2][0];
		I00T2[1][1] = /*I00[1][0] * T2[0][1]+*/ I00[1][1] * T2[1][1] + I00[1][2] * T2[2][1];
		I00T2[1][2] = I00[1][0] * T2[0][2] + I00[1][1] * T2[1][2] + I00[1][2] * T2[2][2];
		I00T2[2][0] = I00[2][0] * T2[0][0] +  /*I00[2][1] * T2[1][0] +*/ I00[2][2] * T2[2][0];
		I00T2[2][1] = /*I00[2][0] * T2[0][1]+*/ I00[2][1] * T2[1][1] + I00[2][2] * T2[2][1];
		I00T2[2][2] = I00[2][0] * T2[0][2] + I00[2][1] * T2[1][2] + I00[2][2] * T2[2][2];
		//I00T3 = I00 * T3;
		I00T3[0][0] = I00[0][0] * T3[0][0] + I00[0][1] * T3[1][0] + I00[0][2] * T3[2][0];
		I00T3[0][1] = I00[0][0] * T3[0][1] + I00[0][1] * T3[1][1] + I00[0][2] * T3[2][1];
		I00T3[0][2] = I00[0][0] * T3[0][2] + I00[0][1] * T3[1][2] + I00[0][2] * T3[2][2];
		I00T3[1][0] = I00[1][0] * T3[0][0] + I00[1][1] * T3[1][0] + I00[1][2] * T3[2][0];
		I00T3[1][1] = I00[1][0] * T3[0][1] + I00[1][1] * T3[1][1] + I00[1][2] * T3[2][1];
		I00T3[1][2] = I00[1][0] * T3[0][2] + I00[1][1] * T3[1][2] + I00[1][2] * T3[2][2];
		I00T3[2][0] = I00[2][0] * T3[0][0] + I00[2][1] * T3[1][0] + I00[2][2] * T3[2][0];
		I00T3[2][1] = I00[2][0] * T3[0][1] + I00[2][1] * T3[1][1] + I00[2][2] * T3[2][1];
		I00T3[2][2] = I00[2][0] * T3[0][2] + I00[2][1] * T3[1][2] + I00[2][2] * T3[2][2];
		//I00T4 = I00 * T4;
		I00T4[0][0] = I00[0][0] * T4[0][0] + I00[0][1] * T4[1][0] + I00[0][2] * T4[2][0];
		I00T4[0][1] = I00[0][0] * T4[0][1] + I00[0][1] * T4[1][1] + I00[0][2] * T4[2][1];
		I00T4[0][2] = I00[0][0] * T4[0][2] + I00[0][1] * T4[1][2] + I00[0][2] * T4[2][2];
		I00T4[1][0] = I00[1][0] * T4[0][0] + I00[1][1] * T4[1][0] + I00[1][2] * T4[2][0];
		I00T4[1][1] = I00[1][0] * T4[0][1] + I00[1][1] * T4[1][1] + I00[1][2] * T4[2][1];
		I00T4[1][2] = I00[1][0] * T4[0][2] + I00[1][1] * T4[1][2] + I00[1][2] * T4[2][2];
		I00T4[2][0] = I00[2][0] * T4[0][0] + I00[2][1] * T4[1][0] + I00[2][2] * T4[2][0];
		I00T4[2][1] = I00[2][0] * T4[0][1] + I00[2][1] * T4[1][1] + I00[2][2] * T4[2][1];
		I00T4[2][2] = I00[2][0] * T4[0][2] + I00[2][1] * T4[1][2] + I00[2][2] * T4[2][2];

		//DUM1 = B2.transpose() * I00 * T1;
		DUM1[0][0] = /*B2[0][0] * I00T1[0][0] + B2[1][0] * I00T1[1][0] +*/ B2[2][0] * I00T1[2][0];
		DUM1[0][1] = /*B2[0][0] * I00T1[0][1] + B2[1][0] * I00T1[1][1] +*/ B2[2][0] * I00T1[2][1];
		DUM1[0][2] = /*B2[0][0] * I00T1[0][2] + B2[1][0] * I00T1[1][2] +*/ B2[2][0] * I00T1[2][2];
		DUM1[1][0] = /*B2[0][1] * I00T1[0][0] + B2[1][1] * I00T1[1][0] +*/ B2[2][1] * I00T1[2][0];
		DUM1[1][1] = /*B2[0][1] * I00T1[0][1] + B2[1][1] * I00T1[1][1] +*/ B2[2][1] * I00T1[2][1];
		DUM1[1][2] = /*B2[0][1] * I00T1[0][2] + B2[1][1] * I00T1[1][2] +*/ B2[2][1] * I00T1[2][2];
		DUM1[2][0] = /*B2[0][2] * I00T1[0][0] + B2[1][2] * I00T1[1][0] +   B2[2][2] * I00T1[2][0]*/0.0;
		DUM1[2][1] = /*B2[0][2] * I00T1[0][1] + B2[1][2] * I00T1[1][1] +   B2[2][2] * I00T1[2][1]*/0.0;
		DUM1[2][2] = /*B2[0][2] * I00T1[0][2] + B2[1][2] * I00T1[1][2] +   B2[2][2] * I00T1[2][2]*/0.0;
		//DUM2 = S1.transpose() * I00 * T2;
		DUM2[0][0] = S1[0][0] * I00T2[0][0] + /*S1[1][0] * I00T2[1][0]+*/ S1[2][0] * I00T2[2][0];
		DUM2[0][1] = S1[0][0] * I00T2[0][1] + /*S1[1][0] * I00T2[1][1]+*/ S1[2][0] * I00T2[2][1];
		DUM2[0][2] = S1[0][0] * I00T2[0][2] + /*S1[1][0] * I00T2[1][2]+*/ S1[2][0] * I00T2[2][2];
		DUM2[1][0] = /*S1[0][1] * I00T2[0][0]+*/  S1[1][1] * I00T2[1][0] + S1[2][1] * I00T2[2][0];
		DUM2[1][1] = /*S1[0][1] * I00T2[0][1]+*/  S1[1][1] * I00T2[1][1] + S1[2][1] * I00T2[2][1];
		DUM2[1][2] = /*S1[0][1] * I00T2[0][2]+*/  S1[1][1] * I00T2[1][2] + S1[2][1] * I00T2[2][2];
		DUM2[2][0] = S1[0][2] * I00T2[0][0] + S1[1][2] * I00T2[1][0] + S1[2][2] * I00T2[2][0];
		DUM2[2][1] = S1[0][2] * I00T2[0][1] + S1[1][2] * I00T2[1][1] + S1[2][2] * I00T2[2][1];
		DUM2[2][2] = S1[0][2] * I00T2[0][2] + S1[1][2] * I00T2[1][2] + S1[2][2] * I00T2[2][2];
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				KS[i + 3][j + 3] = DUM1[i][j] + DUM2[i][j];
			}
		}

		//DUM1 = B2.transpose()* I00 * T3;
		DUM1[0][0] = /*B2[0][0] * I00T3[0][0] + B2T[1][0] * I00T3[1][0] +*/ B2[2][0] * I00T3[2][0];
		DUM1[0][1] = /*B2[0][0] * I00T3[0][1] + B2T[1][0] * I00T3[1][1] +*/ B2[2][0] * I00T3[2][1];
		DUM1[0][2] = /*B2[0][0] * I00T3[0][2] + B2T[1][0] * I00T3[1][2] +*/ B2[2][0] * I00T3[2][2];
		DUM1[1][0] = /*B2[0][1] * I00T3[0][0] + B2T[1][1] * I00T3[1][0] +*/ B2[2][1] * I00T3[2][0];
		DUM1[1][1] = /*B2[0][1] * I00T3[0][1] + B2T[1][1] * I00T3[1][1] +*/ B2[2][1] * I00T3[2][1];
		DUM1[1][2] = /*B2[0][1] * I00T3[0][2] + B2T[1][1] * I00T3[1][2] +*/ B2[2][1] * I00T3[2][2];
		DUM1[2][0] = /*B2[0][2] * I00T3[0][0] + B2T[1][2] * I00T3[1][0] +   B2[2][2] * I00T3[2][0]*/0.0;
		DUM1[2][1] = /*B2[0][2] * I00T3[0][1] + B2T[1][2] * I00T3[1][1] +   B2[2][2] * I00T3[2][1]*/0.0;
		DUM1[2][2] = /*B2[0][2] * I00T3[0][2] + B2T[1][2] * I00T3[1][2] +   B2[2][2] * I00T3[2][2]*/0.0;
		//DUM2 = S1.transpose() * I00 * T4;
		DUM2[0][0] = S1[0][0] * I00T4[0][0] + /*S1[1][0] * I00T4[1][0] +*/ S1[2][0] * I00T4[2][0];
		DUM2[0][1] = S1[0][0] * I00T4[0][1] + /*S1[1][0] * I00T4[1][1] +*/ S1[2][0] * I00T4[2][1];
		DUM2[0][2] = S1[0][0] * I00T4[0][2] + /*S1[1][0] * I00T4[1][2] +*/ S1[2][0] * I00T4[2][2];
		DUM2[1][0] = /*S1[0][1] * I00T4[0][0] +*/ S1[1][1] * I00T4[1][0] + S1[2][1] * I00T4[2][0];
		DUM2[1][1] = /*S1[0][1] * I00T4[0][1] +*/ S1[1][1] * I00T4[1][1] + S1[2][1] * I00T4[2][1];
		DUM2[1][2] = /*S1[0][1] * I00T4[0][2] +*/ S1[1][1] * I00T4[1][2] + S1[2][1] * I00T4[2][2];
		DUM2[2][0] = S1[0][2] * I00T4[0][0] + S1[1][2] * I00T4[1][0] + S1[2][2] * I00T4[2][0];
		DUM2[2][1] = S1[0][2] * I00T4[0][1] + S1[1][2] * I00T4[1][1] + S1[2][2] * I00T4[2][1];
		DUM2[2][2] = S1[0][2] * I00T4[0][2] + S1[1][2] * I00T4[1][2] + S1[2][2] * I00T4[2][2];
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				KS[i + 3][j + 6] = -DUM1[i][j] - DUM2[i][j];
				KS[j + 6][i + 3] = KS[i + 3][j + 6];
			}
		}

		//DUM1 = S2.transpose() * I00 * T3;
		DUM1[0][0] = S2[0][0] * I00T3[0][0] + S2[1][0] * I00T3[1][0] + S2[2][0] * I00T3[2][0];
		DUM1[0][1] = S2[0][0] * I00T3[0][1] + S2[1][0] * I00T3[1][1] + S2[2][0] * I00T3[2][1];
		DUM1[0][2] = S2[0][0] * I00T3[0][2] + S2[1][0] * I00T3[1][2] + S2[2][0] * I00T3[2][2];
		DUM1[1][0] = S2[0][1] * I00T3[0][0] + S2[1][1] * I00T3[1][0] + S2[2][1] * I00T3[2][0];
		DUM1[1][1] = S2[0][1] * I00T3[0][1] + S2[1][1] * I00T3[1][1] + S2[2][1] * I00T3[2][1];
		DUM1[1][2] = S2[0][1] * I00T3[0][2] + S2[1][1] * I00T3[1][2] + S2[2][1] * I00T3[2][2];
		DUM1[2][0] = /*S2[0][2] * I00T3[0][0] + S2[1][2] * I00T3[1][0]*/ +S2[2][2] * I00T3[2][0];
		DUM1[2][1] = /*S2[0][2] * I00T3[0][1] + S2[1][2] * I00T3[1][1]*/ +S2[2][2] * I00T3[2][1];
		DUM1[2][2] = /*S2[0][2] * I00T3[0][2] + S2[1][2] * I00T3[1][2]*/ +S2[2][2] * I00T3[2][2];
		//DUM2 = A1.transpose() * I00 * T4;
		DUM2[0][0] = /*A1[0][0] * I00T4[0][0] +*/ A1[1][0] * I00T4[1][0] + A1[2][0] * I00T4[2][0];
		DUM2[0][1] = /*A1[0][0] * I00T4[0][1] +*/ A1[1][0] * I00T4[1][1] + A1[2][0] * I00T4[2][1];
		DUM2[0][2] = /*A1[0][0] * I00T4[0][2] +*/ A1[1][0] * I00T4[1][2] + A1[2][0] * I00T4[2][2];
		DUM2[1][0] = A1[0][1] * I00T4[0][0] + /*A1[1][1] * I00T4[1][0] +*/ A1[2][1] * I00T4[2][0];
		DUM2[1][1] = A1[0][1] * I00T4[0][1] + /*A1[1][1] * I00T4[1][1] +*/ A1[2][1] * I00T4[2][1];
		DUM2[1][2] = A1[0][1] * I00T4[0][2] + /*A1[1][1] * I00T4[1][2] +*/ A1[2][1] * I00T4[2][2];
		DUM2[2][0] = A1[0][2] * I00T4[0][0] + A1[1][2] * I00T4[1][0] /*+ A1[2][2] * I00T4[2][0]*/;
		DUM2[2][1] = A1[0][2] * I00T4[0][1] + A1[1][2] * I00T4[1][1] /*+ A1[2][2] * I00T4[2][1]*/;
		DUM2[2][2] = A1[0][2] * I00T4[0][2] + A1[1][2] * I00T4[1][2] /*+ A1[2][2] * I00T4[2][2]*/;
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				KS[i + 6][j + 6] = DUM1[i][j] + DUM2[i][j];
			}
		}

		double BENSUM = 0.0, SHRSUM = 0.0;;
		for (int i = 3; i < 9; i++) { BENSUM += KB[i][i];		SHRSUM += KS[i][i]; }

		double PSI_HAT = BENSUM / SHRSUM;
		PHI_SQ = 2.0 * PSI_HAT / (1.0 + 2.0 * PSI_HAT);

		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				ke[ID[i]][ID[j]] += KB[i][j] + PHI_SQ * KS[i][j];
			}
		}
	}

	void CTRIA3::Stress(vector<double>& UEL)
	{
		double matD[8][8] = { 0. };
		build_cons_mat(matD);

		double STRESS[9] = { 0. };
		double STRAIN[3][3] = { 0. };

		//计算应变（注意BE矩阵都是压缩存储的）
		STRAIN[0][0] = BE1[0][0] * UEL[0] + BE1[0][2] * UEL[6];
		STRAIN[0][1] = BE1[1][1] * UEL[1] + BE1[1][3] * UEL[7] + BE1[1][4] * UEL[13];
		STRAIN[0][2] = BE1[2][0] * UEL[0] + BE1[2][1] * UEL[1] + BE1[2][2] * UEL[6] + BE1[2][3] * UEL[7] + BE1[2][4] * UEL[12];

		STRAIN[1][0] = BE2[0][0] * UEL[3] + BE2[0][1] * UEL[4] + BE2[0][2] * UEL[9] + BE2[0][3] * UEL[10] + BE2[0][4] * UEL[15] + BE2[0][5] * UEL[16];
		STRAIN[1][1] = BE2[1][0] * UEL[3] + BE2[1][1] * UEL[4] + BE2[1][2] * UEL[9] + BE2[1][3] * UEL[10] + BE2[1][4] * UEL[15] + BE2[1][5] * UEL[16];
		STRAIN[1][2] = BE2[2][0] * UEL[3] + BE2[2][1] * UEL[4] + BE2[2][2] * UEL[9] + BE2[2][3] * UEL[10] + BE2[2][4] * UEL[15] + BE2[2][5] * UEL[16];

		STRAIN[2][0] = BE3[0][0] * UEL[2] + BE3[0][1] * UEL[3] + BE3[0][2] * UEL[4] 
					 + BE3[0][3] * UEL[8] + BE3[0][4] * UEL[9] + BE3[0][5] * UEL[10] 
					 + BE3[0][6] * UEL[14]+ BE3[0][7] * UEL[15]+ BE3[0][8] * UEL[16];
		STRAIN[2][0] = BE3[1][0] * UEL[2] + BE3[1][1] * UEL[3] + BE3[1][2] * UEL[4] 
					 + BE3[1][3] * UEL[8] + BE3[1][4] * UEL[9] + BE3[1][5] * UEL[10] 
					 + BE3[1][6] * UEL[14]+ BE3[1][7] * UEL[15]+ BE3[1][8] * UEL[16];

		double EM[3][3];
		EM[0][0] = matD[0][0] / t;			EM[0][1] = matD[0][1] / t;			EM[0][2] = matD[0][2] / t;
		EM[1][0] = matD[1][0] / t;			EM[1][1] = matD[1][1] / t;			EM[1][2] = matD[1][2] / t;
		EM[2][0] = matD[2][0] / t;			EM[2][1] = matD[2][1] / t;			EM[2][2] = matD[2][2] / t;

		STRESS[0] = EM[0][0] * STRAIN[0][0] + EM[0][1] * STRAIN[0][1] + EM[0][2] * STRAIN[0][2];
		STRESS[1] = EM[1][0] * STRAIN[0][0] + EM[1][1] * STRAIN[0][1] + EM[1][2] * STRAIN[0][2];
		STRESS[2] = EM[2][0] * STRAIN[0][0] + EM[2][1] * STRAIN[0][1] + EM[2][2] * STRAIN[0][2];

		STRESS[3] = EM[0][0] * STRAIN[1][0] + EM[0][1] * STRAIN[1][1] + EM[0][2] * STRAIN[1][2];
		STRESS[4] = EM[1][0] * STRAIN[1][0] + EM[1][1] * STRAIN[1][1] + EM[1][2] * STRAIN[1][2];
		STRESS[5] = EM[2][0] * STRAIN[1][0] + EM[2][1] * STRAIN[1][1] + EM[2][2] * STRAIN[1][2];

		STRESS[6] = EM[2][2] * STRAIN[2][0] * PHI_SQ;
		STRESS[7] = EM[2][2] * STRAIN[2][1] * PHI_SQ;
		STRESS[8] = 0.0;
	}
}